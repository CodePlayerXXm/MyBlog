import{_ as s,c as n,o as a,V as l}from"./chunks/framework.7cada2c9.js";const d=JSON.parse('{"title":"TypeScript tsc 命令行编译器","description":"","frontmatter":{"title":"TypeScript tsc 命令行编译器","group":"TypeScript","layout":"doc","date":"2024-02-02T09:49:23.403Z","tags":["TypeScript"],"sidebar":true,"summary":"TypeScript tsc 命令行编译器"},"headers":[],"relativePath":"content/docs/TypeScript/CommandLineComplier.md"}'),p={name:"content/docs/TypeScript/CommandLineComplier.md"},o=l(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。<br></p><p>tsc 默认使用当前目录下的配置文件tsconfig.json，但也可以接受独立的命令行参数。命令行参数会覆盖tsconfig.json，比如命令行指定了所要编译的文件，那么 tsc 就会忽略tsconfig.json的files属性。</p><div class="language-Shell"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 使用 tsconfig.json 的配置</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 只编译 index.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 编译 src 目录的所有 .ts 文件</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src/</span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 指定编译配置文件</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--project</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsconfig.production.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 只生成类型声明文件，不编译出 JS 文件</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--declaration</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--emitDeclarationOnly</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 多个 TS 文件编译成单个 JS 文件</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">util.ts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">esnext</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--outfile</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span></span></code></pre></div>`,4),t=[o];function e(c,r,i,C,y,A){return a(),n("div",null,t)}const E=s(p,[["render",e]]);export{d as __pageData,E as default};
