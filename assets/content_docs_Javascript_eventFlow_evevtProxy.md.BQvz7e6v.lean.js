import{_ as t,D as i,c as p,I as a,a8 as n,l as s,a as E,o as e}from"./chunks/framework.D3rKSoAR.js";const x=JSON.parse('{"title":"事件流与事件委托","description":"","frontmatter":{"title":"事件流与事件委托","group":"JavaScript","layout":"post","date":"2021-01-02T05:54:36.000Z","tags":["JavaScript","Vue"],"sidebar":true,"summary":"所谓事件流是描述指页面上DOM事件执行的先后顺序。而事件委托是利用事件流的冒泡，在父元素上监听子元素事件触发的一种优化处理方式。"},"headers":[],"relativePath":"content/docs/Javascript/eventFlow&evevtProxy.md","filePath":"content/docs/Javascript/eventFlow&evevtProxy.md"}'),d={name:"content/docs/Javascript/eventFlow&evevtProxy.md"},r=n("",4),g=n("",11),y=n("",4),F=s("p",null,"  从打印结果可以看出，事件监听绑定在父元素上，通过事件委托点击其子元素，可以打印出该子元素内的内容。",-1),c=s("h3",{id:"事件委托的优点",tabindex:"-1"},[E("事件委托的优点 "),s("a",{class:"header-anchor",href:"#事件委托的优点","aria-label":'Permalink to "事件委托的优点"'},"​")],-1),o=s("p",null,"  1.通过事件委托可以提高性能。假如父元素下有多个子元素，不通过事件委托，要在每一个子元素上加一个点击事件，但是事件委托，只需要在父元素上添加一次事件。",-1),C=s("p",null,"  2.事件委托还可以对动态添加的未来元素同样有效。",-1);function B(u,A,D,v,q,_){const h=i("eventFlowEg1"),l=i("eventFlowEg2"),k=i("eventFlowEg3");return e(),p("div",null,[r,a(h),g,a(l),y,a(k),F,c,o,C])}const b=t(d,[["render",B]]);export{x as __pageData,b as default};
