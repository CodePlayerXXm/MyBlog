import{_ as e,c,I as n,V as l,C as s,a as r,o as F,J as a}from"./chunks/framework.7cada2c9.js";const x=JSON.parse('{"title":"事件流与事件委托","description":"","frontmatter":{"title":"事件流与事件委托","group":"JavaScript","layout":"post","date":"2021-01-02T05:54:36.000Z","tags":["JavaScript","Vue"],"sidebar":true,"summary":"所谓事件流是描述指页面上DOM事件执行的先后顺序。而事件委托是利用事件流的冒泡，在父元素上监听子元素事件触发的一种优化处理方式。"},"headers":[],"relativePath":"content/docs/Javascript/eventFlow&evevtProxy.md"}'),D={name:"content/docs/Javascript/eventFlow&evevtProxy.md"},y=l("",4),C=l("",11),i=l("",4),A=s("p",null,"  从打印结果可以看出，事件监听绑定在父元素上，通过事件委托点击其子元素，可以打印出该子元素内的内容。",-1),d=s("h3",{id:"事件委托的优点",tabindex:"-1"},[r("事件委托的优点 "),s("a",{class:"header-anchor",href:"#事件委托的优点","aria-label":'Permalink to "事件委托的优点"'},"​")],-1),u=s("p",null,"  1.通过事件委托可以提高性能。假如父元素下有多个子元素，不通过事件委托，要在每一个子元素上加一个点击事件，但是事件委托，只需要在父元素上添加一次事件。",-1),g=s("p",null,"  2.事件委托还可以对动态添加的未来元素同样有效。",-1);function h(E,q,_,v,B,m){const p=a("eventFlowEg1"),o=a("eventFlowEg2"),t=a("eventFlowEg3");return F(),c("div",null,[y,n(p),C,n(o),i,n(t),A,d,u,g])}const k=e(D,[["render",h]]);export{x as __pageData,k as default};
